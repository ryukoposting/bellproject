#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'bellproject'
require 'tty-prompt'
require 'fileutils'
require 'pathname'
require 'progressbar'

puts "****************************************************************"
puts "Bell Project Archiver #{BellProject::VERSION}"
puts "****************************************************************"

ipfs = Kubo::Client.new

def most_recent_created_dir(path)
  Dir.glob("#{path}/*/").max_by { |d| File.ctime(d) }
end

class Tag
  attr_accessor :group
  attr_accessor :value

  def initialize(val)
    spl = val.strip.split ':'
    if spl.length == 1
      @value = spl[0]
    elsif spl.length == 2
      @group = spl[0]
      @value = spl[1]
    else
      raise "Invalid tag '#{tag}'"
    end
  end

  def to_s
    if @group.nil?
      "#{@value}"
    else
      "#{@group}:#{@value}"
    end
  end

  def ==(o)
    o.class == self.class && o.group == @group && o.value == @value
  end

  alias_method :eql?, :==

  def hash
    [@group, @value].hash
  end
end


type_tags = [
  Tag.new('type:Software'),
  Tag.new('type:Game'),
  Tag.new('type:Document'),
  Tag.new('type:OS'),
]

platform_tags = [
  Tag.new('platform:IBM'),
  Tag.new('platform:TRS-80'),
  Tag.new('platform:Z100'),
]

os_tags = [
  Tag.new('os:MS-DOS'),
  Tag.new('os:Windows 3.1'),
  Tag.new('os:Windows 95'),
  Tag.new('os:Windows 98'),
  Tag.new('os:Windows NT'),
  Tag.new('os:Windows XP'),
  Tag.new('os:NewDOS/80'),
  Tag.new('os:TRS-DOS'),
]

media_tags = [
  Tag.new('media:3.5" Floppy'),
  Tag.new('media:5.25" Floppy'),
  Tag.new('media:CD-ROM'),
  Tag.new('media:DVD-ROM'),
  Tag.new('media:unknown'),
]

class TTY::Prompt
  def get_archive_dir(msg)
    default_value = File.basename most_recent_created_dir(BellProject::Config.instance.archives_path)
    self.ask(msg, value: default_value) do |d|
      d.validate -> (t) {
        File.directory? File.join(BellProject::Config.instance.archives_path, t)
      }
      d.messages[:valid?] = 'No such directory: %{value}'
    end
  end

  def get_floppy_device(msg)
    @default_floppy_dev = '' unless @default_floppy_dev
    @default_floppy_dev = self.ask(msg, value: @default_floppy_dev)
    @default_floppy_dev
  end
end

prompt = TTY::Prompt.new
choices = [
  { key: 'n', name: 'Create or Modify An Archive', value: :create },
  { key: 'a', name: 'Make a new Archive Directory', value: :mkdir },
  { key: 'f', name: 'Image a Floppy Disk', value: :floppy },
  { key: 'q', name: 'Quit', value: :quit },
]

while true
  cmd = prompt.expand('What do you want to do?', choices)

  case cmd
  when :quit
    exit 0
  when :create
    dir = prompt.get_archive_dir('Choose an archive directory:')
    ipfs_slug = File.basename(dir)
    dir = BellProject::Config.instance.archives_path.join(ipfs_slug)
    out_dir = BellProject::Config.instance.pages_path.join(ipfs_slug)
    done_dir = BellProject::Config.instance.done_path.join(ipfs_slug)

    FileUtils.mkdir_p out_dir
    FileUtils.mkdir_p done_dir

    candidates = Dir.glob("#{dir}/**/*").filter do |f|
      base = File.basename(f)
      File.file?(f) && base[0] != '.'
    end

    candidates = candidates.map do |f|
      Pathname.new(f).relative_path_from(dir).to_s
    end

    selected = prompt.multi_select("Select files to be archived:", candidates, cycle: true) do |s|
      s.default *(1..candidates.length)
    end

    hashes = File.new(out_dir.join('HASHES'), 'w')

    ipfs_folder = Kubo::FolderNode.new(ipfs_slug)

    selected.each do |f|
      dirname, basename = File.split f
      ipfs_folder.add_file(basename, dirname) do |mode|
        File.open(File.join(dir, f), mode)
      end
    end

    ipfs.add(ipfs_folder) do |node, progress|
      next unless node.ipfs_hash
      path = File.join(BellProject::Config.instance.archives_path, node.path)
      hashes.puts "#{node.ipfs_hash} #{Pathname.new(path).relative_path_from(dir)}"
      puts "âœ“ Uploaded #{node.path}"
    end

    hashes.close

    title_file = out_dir.join('TITLE')
    title_value = if File.exist?(title_file)
      File.read(title_file).strip
    else
      ''
    end
    title = prompt.ask('Archive title:', value: title_value)
    File.write(title_file, title)

    tags_file = out_dir.join('TAGS')
    tags = if File.exist?(tags_file)
      File.readlines(tags_file).filter_map do |line|
        line = line.strip
        next unless line.length > 0
        next if line[0] == '#'
        Tag.new(line)
      end
    else
      []
    end

    type = prompt.select('Archive Type:', type_tags, cycle: true) do |p|
      type_tags.each_with_index do |ty, i|
        p.default(i + 1) if tags.include? ty
      end
    end
    tags.delete_if { |t| t.group == 'type' }
    tags << type

    if type == Tag.new('type:Software') || type == Tag.new('type:Game')
      os = prompt.multi_select('Supported OS:', os_tags, cycle: true) do |p|
        defaults = []
        os_tags.each_with_index do |ty, i|
          defaults << (i + 1) if tags.include? ty
        end
        p.default *defaults
      end
      tags.delete_if { |t| t.group == 'os' }
      tags.push *os
    elsif type == Tag.new('type:OS')
      platform = prompt.multi_select('Plaform:', platform_tags, cycle: true) do |p|
        defaults = []
        platform_tags.each_with_index do |ty, i|
          defaults << (i + 1) if tags.include? ty
        end
        p.default *defaults
      end
      tags.delete_if { |t| t.group == 'platform' }
      tags.push *platform
    end

    media = prompt.multi_select('Media Types:', media_tags, cycle: true) do |p|
      defaults = []
      media_tags.each_with_index do |ty, i|
        defaults << (i + 1) if tags.include? ty
      end
      p.default *defaults
    end
    tags.delete_if { |t| t.group == 'media' }
    tags.push *media

    begin
      f = File.open(tags_file, 'w')
      tags.each do |tag|
        f.puts tag
      end
      f.close
    end

    system("#{ENV['EDITOR']} '#{tags_file}'")

    index_file = out_dir.join('index.html')
    index_file = out_dir.join('index.md') unless File.exist?(index_file)

    unless File.exist?(index_file)
      f = File.open(index_file, 'w')
      f.puts "# #{title}"
      f.close
    end

    system("#{ENV['EDITOR']} '#{index_file}'")

    FileUtils.mv dir, done_dir
  when :floppy
    dir = prompt.get_archive_dir('Choose an archive directory:')
    device = prompt.get_floppy_device('Floppy drive device:')
    ipfs_slug = File.basename(dir)
    dir = BellProject::Config.instance.archives_path.join(ipfs_slug)

    name = prompt.ask('Image name:')
    image_path = dir.join(name)

    system("sudo dd if=#{device} of=#{image_path}")
  when :mkdir
    slug = prompt.ask('Slug:')
    FileUtils.mkdir_p BellProject::Config.instance.archives_path.join(slug)
  end
end
